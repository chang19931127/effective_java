/**
 * 线程安全性的文档化
 * 
 * 线程安全的集中级别
 * 不可变：肯定安全,String
 * 无条件的线程安全：实例可变，但是类中有足够的同步，也是线程安全.ConcurrentHashMap
 * 有条件的线程安全：通过条件来使其安全，例如Collections.synchronized
 * 非线程安全：实例可变，并发会被多个线程同时调用，会产生问题，ArrayList
 * 线程对立的，这个类不能安全地被多个线程并发使用
 * 
 * 还是一句话，文档很重要
 * 
 * 简而言之，每个类都应该利用字斟句酌的说明或者线程安全注解，清楚地在文档中说明它的
 * 线程安全属性，synchronized修饰符与这个文档毫无关系，有条件的线程安全类必须在
 * 文档中指明“那个方法调用序列需要外部同步，以及在执行这些序列的时候要获得那把锁”，
 * 如果你编写的是无条件的线程安全类，就应该考虑使用私有锁对象来代替同步的方法，这样可以
 * 防止客户端程序和子类的不同步干扰，让你能够在后续的版本中灵活地对并发控制采用更加复杂的方法
 * @author Administrator	
 *
 */
package me.czd.effective.java.concurrent.threadsafedoc;