/**
 * 思考以下，我们的业务针对某些对象不再引用了，但是我们的代码确是在引用，怎么搞，会发生什么?
 * 没错，内存泄漏！
 * 因此，我们程序员需要确保我们不再使用的对象尽可能合理的释放，即不再引用
 * 
 * 注意：只要类是自己管理内存，程序员就应该警惕内存泄漏问题
 * 内存泄露的另一个常见来源是缓存。一旦你把对象引用放到缓存中，她就很容易被遗忘掉
 * 我们可以使用WeakHashMap来做缓存，但是注意：   了解WeakHashMap
 * 			只有缓存项的生命周期是由该键的外部引用而不是由值决定时，WeakHashMap才有用
 * 
 * 监听器和其他回调导致内存泄漏
 * 			如果你实现一个API，客户端在这个API中注册回调，却没有显式的取消注册，那么除非你
 * 采取某些动作，否则它们就会集聚。可以考虑通过弱引用来搞
 * @author Administrator
 *
 */
package me.czd.effective.java.objectcreate.removeexpireobject;