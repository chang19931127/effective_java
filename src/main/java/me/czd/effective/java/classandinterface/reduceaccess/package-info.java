/**
 * 是类和成员的可访问性最小化！
 * 
 * 说道这一点，必然离不开封装的意义了，想一下你开发的模块或者API暴露出去，但是调用者并不知道实现的细节
 * 那样子，对调用者是多么的友好，因此，尽可能的封装，隐藏内部实现
 * 这样子，你内部算法，或者逻辑，如何的改变，外部都不会做大改动！这样的程序很好维护
 * 
 * 说道这个，就要知道java中提供的四个访问权限
 * private			只有在声明该成员的顶层类内部才能访问到这个成员
 * default			声明该成员的包内部的任何类都可以访问这个成员，默认级别
 * protected		声明该成员的类的子类，或者包内部的任何类也可以访问这个成员
 * public			在任何地方都可以访问该成员
 * 
 * 有几个特跌讨论点
 * 1，如果这个类实现了Serializable接口，这些域就有可能会被泄露出去了
 * 2，如果子类方法覆盖了父类中的一个方法，那么这个方法的访问等级不允许低于超类中的访问级别
 * 3，如果域是非final或者一个指向可变对象的final引用，并且这个域是共有的，那么这个存储的域对于该类就是不可控的
 * 
 * 所以要去想办法避免这些操作
 * @author Administrator
 *
 */
package me.czd.effective.java.classandinterface.reduceaccess;