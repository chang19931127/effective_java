/**
 * 使用enum代替int常量
 * 
 * 在枚举没有出现之前，我们来使用常量表示我们经常使用的常量，怎么做
 * public static final int APPLE_PIPPIN = 0;
 * 但是这么做，扩展性，识别性，等等都不好，
 * 这种方式称为 int 枚举模式，同样还有String 枚举模式，等等
 * 
 * 但是伴随着枚举的出现，我们针对这些常量，都应该使用枚举来搞定！
 * 说下枚举的特点，枚举是单例！枚举属性的天生不可变性
 * 所以，只要是一些有意义的常量组，我们都可以通过枚举类搞定!代码看起来也漂亮
 * 
 * 那么这里就来几个枚举的日常使用！，以及糟糕的int 枚举模式
 * 
 * java枚举类型背后的基本想法
 * 就是通过共有的静态final域为每个枚举常量到处实例的类
 * 并且没有可以访问的构造器，因此枚举类型是真正的final
 * 并且客户端不能创建枚举实例，也不能进行扩展，只能使用声明过的
 * 并且他的实例都是受控的，单例，单元素，只是一个类型有多个实例，每个实例都是单例。俗称单例的泛型化
 * 并且枚举还可以添加一些方法，以及每个域，因为他的本质还是类。
 * 
 * 通常情况下枚举类仅用于某些功能，我们就可以考虑包私有！
 * 除非那些都需要的，例如BigDecimal类中的RoundingMode枚举就是包私有
 * 
 * 枚举还提供了toString方法
 * values()获取当前枚举的所有实例
 * 为了遍历，枚举实例都会有一个int的序数！
 * 和valueOf()方法
 * 这些方法让我们更好的使用枚举，毕竟枚举就是为了提到int枚举和String枚举，因此，枚举必然会有一个变量来支持
 * 通过valueOf方法可以感觉到是String
 * @author Administrator
 *
 */
package me.czd.effective.java.enumandanno.enuminsteadconstant;